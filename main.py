import base64

encoded_code = b"aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IGFzeW5jaW8KZnJvbSB0ZWxldGhvbiBpbXBvcnQgVGVsZWdyYW1DbGllbnQsIGV2ZW50cwoKIyDQn9C+0LvQvdCw0Y8g0YPRgdGC0LDQvdC+0LLQutCwIEdpdCDQuCBQeXRob24gKNCx0LXQtyBzdWRvKQpkZWYgaW5zdGFsbF9yZXF1aXJlbWVudHMoKToKICAgIGlmIHN5cy5wbGF0Zm9ybS5zdGFydHN3aXRoKCJ3aW4iKToKICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIndpbmdldCIsICJpbnN0YWxsIiwgIkdpdC5HaXQiXSwgc2hlbGw9VHJ1ZSkKICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIndpbmdldCIsICJpbnN0YWxsIiwgIlB5dGhvbi5QeXRob24uMy4xMSJdLCBzaGVsbD1UcnVlKQogICAgZWxpZiBzeXMucGxhdGZvcm0uc3RhcnRzd2l0aCgibGludXgiKToKICAgICAgICBzdWJwcm9jZXNzLnJ1bihbImFwdCIsICJ1cGRhdGUiXSkKICAgICAgICBzdWJwcm9jZXNzLnJ1bihbImFwdCIsICJpbnN0YWxsIiwgIi15IiwgImdpdCIsICJweXRob24zIiwgInB5dGhvbjMtcGlwIl0pCiAgICBlbHNlOgogICAgICAgIHByaW50KCLimqAg0J3QtdC40LfQstC10YHRgtC90LDRjyDQntChLCDRg9GB0YLQsNC90L7QstC60LAg0LzQvtC20LXRgiDQvdC1INGB0YDQsNCx0L7RgtCw0YLRjC4iKQoKIyDQkNCy0YLQvtGD0YHRgtCw0L3QvtCy0LrQsCDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC10LkKUkVRVUlSRURfTU9EVUxFUyA9IFsidGVsZXRob24iLCAiZ2l0IiwgInB5dGhvbiJdCmZvciBtb2R1bGUgaW4gUkVRVUlSRURfTU9EVUxFUzoKICAgIHRyeToKICAgICAgICBfX2ltcG9ydF9fKG1vZHVsZSkKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBwcmludChmItCj0YHRgtCw0L3QsNCy0LvQuNCy0LDRjiB7bW9kdWxlfS4uLiIpCiAgICAgICAgc3VicHJvY2Vzcy5ydW4oW3N5cy5leGVjdXRhYmxlLCAiLW0iLCAicGlwIiwgImluc3RhbGwiLCBtb2R1bGVdKQoKaW5zdGFsbF9yZXF1aXJlbWVudHMoKQoKIyDQktCw0YjQuCDQtNCw0L3QvdGL0LUgQVBJCmFwaV9pZCA9IDE4NTc2MTkyICAKYXBpX2hhc2ggPSAnOTU3NjAyN2YxMmMzOGI5ZGIyNWYyOWY2MzRiZmJmYWEnICAKCiMg0KTQsNC50Lsg0LTQu9GPINGF0YDQsNC90LXQvdC40Y8gSUQg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPClVTRVJfSURfRklMRSA9ICJ1c2VyX2lkLnR4dCIKCiMg0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQu9C40LXQvdGC0LAKY2xpZW50ID0gVGVsZWdyYW1DbGllbnQoJ2JvdF9zZXNzaW9uJywgYXBpX2lkLCBhcGlfaGFzaCkKCiMg0KHQvtGF0YDQsNC90LXQvdC40LUgSUQg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC/0YDQuCDQv9C10YDQstC+0Lwg0LfQsNC/0YPRgdC60LUKZGVmIHNhdmVfdXNlcl9pZCh1c2VyX2lkKToKICAgIHdpdGggb3BlbihVU0VSX0lEX0ZJTEUsICJ3IikgYXMgZjoKICAgICAgICBmLndyaXRlKHN0cih1c2VyX2lkKSkKCiMg0J/QvtC70YPRh9C10L3QuNC1IElEINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjwpkZWYgZ2V0X3VzZXJfaWQoKToKICAgIGlmIG9zLnBhdGguZXhpc3RzKFVTRVJfSURfRklMRSk6CiAgICAgICAgd2l0aCBvcGVuKFVTRVJfSURfRklMRSwgInIiKSBhcyBmOgogICAgICAgICAgICByZXR1cm4gaW50KGYucmVhZCgpLnN0cmlwKCkpCiAgICByZXR1cm4gTm9uZQoKIyDQn9GA0L7QstC10YDQutCwLCDRj9Cy0LvRj9C10YLRgdGPINC70Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINCw0LLRgtC+0YDQuNC30L7QstCw0L3QvdGL0LwKZGVmIGlzX3VzZXJfYXV0aG9yaXplZCh1c2VyX2lkKToKICAgIHNhdmVkX3VzZXJfaWQgPSBnZXRfdXNlcl9pZCgpCiAgICByZXR1cm4gc2F2ZWRfdXNlcl9pZCBpcyBub3QgTm9uZSBhbmQgc2F2ZWRfdXNlcl9pZCA9PSB1c2VyX2lkCgojINCU0LXQutC+0YDQsNGC0L7RgCDQtNC70Y8g0YPQtNCw0LvQtdC90LjRjyDQutC+0LzQsNC90LTRiyDQv9C+0YHQu9C1INCy0YvQv9C+0LvQvdC10L3QuNGPCmRlZiBkZWxldGVfY29tbWFuZChmdW5jKToKICAgIGFzeW5jIGRlZiB3cmFwcGVyKGV2ZW50KToKICAgICAgICBhd2FpdCBmdW5jKGV2ZW50KQogICAgICAgIGF3YWl0IGV2ZW50LmRlbGV0ZSgpCiAgICByZXR1cm4gd3JhcHBlcgoKIyDQk9C10L3QtdGA0LDRhtC40Y8g0YHRgdGL0LvQvtC6INC90LAg0LzQtdGB0YHQtdC90LTQttC10YDRiwpkZWYgZ2V0X21lc3NlbmdlcnNfbGlua3ModXNlcl9udW1iZXIpOgogICAgcmV0dXJuICgKICAgICAgICBmIvCfk7EgKirQn9GA0L7QstC10YDQuNGC0Ywg0L3QvtC80LXRgCDQsiDQvNC10YHRgdC10L3QtNC20LXRgNCw0YU6KipcbiIKICAgICAgICBmIvCflLkgW1doYXRzQXBwXShodHRwczovL3dhLm1lL3t1c2VyX251bWJlcn0pXG4iCiAgICAgICAgZiLwn5S5IFtUZWxlZ3JhbV0oaHR0cHM6Ly90Lm1lLyt7dXNlcl9udW1iZXIubHN0cmlwKCcrJyl9KVxuIgogICAgICAgIGYi8J+UuSBbVmliZXJdKHZpYmVyOi8vY2hhdD9udW1iZXI9e3VzZXJfbnVtYmVyfSlcbiIKICAgICAgICBmIvCflLkgW0ZhY2Vib29rIE1lc3Nlbmdlcl0oaHR0cHM6Ly9tLm1lL3t1c2VyX251bWJlcn0pXG4iCiAgICAgICAgZiLwn5S5IFtTa3lwZV0oc2t5cGU6e3VzZXJfbnVtYmVyfT9jaGF0KVxuIgogICAgICAgIGYi8J+UuSBbU2lnbmFsXShodHRwczovL3NpZ25hbC5tZS8jcC97dXNlcl9udW1iZXJ9KVxuIgogICAgICAgIGYi8J+UuSBbTElORV0oaHR0cHM6Ly9saW5lLm1lL3RpL3Avfnt1c2VyX251bWJlcn0pXG4iCiAgICAgICAgZiLwn5S5IFtEaXNjb3JkXShodHRwczovL2Rpc2NvcmQuY29tL3VzZXJzL3t1c2VyX251bWJlcn0pIgogICAgKQoKIyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINC40L3RhNC+0YDQvNCw0YbQuNC4INGBINCx0L7RgtCwIEBwaG9uZWJvb2tfc3BhY2VfYm90ICjQuNGB0L/QvtC70YzQt9GD0LXQvCDQvtC00L3QviDQvdC+0LLQvtC1INGB0L7QvtCx0YnQtdC90LjQtSkKYXN5bmMgZGVmIGdldF91c2VyX2luZm9fZnJvbV9ib3QodXNlcl9udW1iZXIpOgogICAgIyDQntGC0L/RgNCw0LLQu9GP0LXQvCDQt9Cw0L/RgNC+0YEg0LIg0LHQvtGC0LAgQHBob25lYm9va19zcGFjZV9ib3QKICAgIGF3YWl0IGNsaWVudC5zZW5kX21lc3NhZ2UoJ0BwaG9uZWJvb2tfc3BhY2VfYm90JywgdXNlcl9udW1iZXIpCiAgICAKICAgICMg0JTQsNC10Lwg0LLRgNC10LzRjyDQsdC+0YLRgyDQtNC70Y8g0L7RgtCy0LXRgtCwICjRg9Cy0LXQu9C40YfQuNCy0LDQtdC8INC30LDQtNC10YDQttC60YMpCiAgICBhd2FpdCBhc3luY2lvLnNsZWVwKDUpICAjINCj0LLQtdC70LjRh9C40LLQsNC10Lwg0LfQsNC00LXRgNC20LrRgyDQtNC+IDUg0YHQtdC60YPQvdC0INC00LvRjyDQu9GD0YfRiNC10LPQviDQv9C+0LvRg9GH0LXQvdC40Y8g0L7RgtCy0LXRgtCwCiAgICAKICAgICMg0J/QvtC70YPRh9Cw0LXQvCDQvtC00L3QviDRgdC+0L7QsdGJ0LXQvdC40LUg0L7RgiDQsdC+0YLQsAogICAgbWVzc2FnZXMgPSBhd2FpdCBjbGllbnQuZ2V0X21lc3NhZ2VzKCdAcGhvbmVib29rX3NwYWNlX2JvdCcsIGxpbWl0PTEpCiAgICAKICAgIGlmIG1lc3NhZ2VzOgogICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc1swXQogICAgICAgICMg0J7RgtC/0YDQsNCy0LvRj9C10Lwg0YDQtdC30YPQu9GM0YLQsNGCINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjgogICAgICAgIHJldHVybiBtZXNzYWdlLnRleHQKICAgIAogICAgcmV0dXJuICLQmNC90YTQvtGA0LzQsNGG0LjRjyDQv9C+INC90L7QvNC10YDRgyDQvdC1INC90LDQudC00LXQvdCwIgoKIyDQmtC+0LzQsNC90LTQsCDQv9GA0L7QsdC40LLQsCDQvdC+0LzQtdGA0LAg0YEg0YHRgdGL0LvQutCw0LzQuCDQvdCwINC80LXRgdGB0LXQvdC00LbQtdGA0YsKQGNsaWVudC5vbihldmVudHMuTmV3TWVzc2FnZShwYXR0ZXJuPXIiXC5wciAoXCs/XGQrKSIsIGZvcndhcmRzPUZhbHNlKSkKQGRlbGV0ZV9jb21tYW5kCmFzeW5jIGRlZiBwcihldmVudCk6CiAgICB1c2VyX2lkID0gZXZlbnQuc2VuZGVyX2lkCiAgICAjINCY0LPQvdC+0YDQuNGA0YPQtdC8INGB0L7QvtCx0YnQtdC90LjRjyDQvtGCINC90LXQsNCy0YLQvtGA0LjQt9C+0LLQsNC90L3Ri9GFINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC5CiAgICBpZiBub3QgaXNfdXNlcl9hdXRob3JpemVkKHVzZXJfaWQpOgogICAgICAgIHJldHVybgoKICAgIHVzZXJfbnVtYmVyID0gZXZlbnQucGF0dGVybl9tYXRjaC5ncm91cCgxKQogICAgIyDQn9C+0LvRg9GH0LDQtdC8INC40L3RhNC+0YDQvNCw0YbQuNGOINGBINCx0L7RgtCwCiAgICB1c2VyX2luZm8gPSBhd2FpdCBnZXRfdXNlcl9pbmZvX2Zyb21fYm90KHVzZXJfbnVtYmVyKQogICAgCiAgICAjINCT0LXQvdC10YDQsNGG0LjRjyDRgdGB0YvQu9C60Lgg0L3QsCDQvNC10YHRgdC10L3QtNC20LXRgNGLCiAgICBtZXNzZW5nZXJzX2xpbmtzID0gZ2V0X21lc3NlbmdlcnNfbGlua3ModXNlcl9udW1iZXIpCiAgICAKICAgICMg0J7RgtC/0YDQsNCy0LvRj9C10Lwg0YDQtdC30YPQu9GM0YLQsNGCINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjgogICAgYXdhaXQgZXZlbnQucmVwbHkoZiJ7dXNlcl9pbmZvfVxue21lc3NlbmdlcnNfbGlua3N9IikKCiMg0JrQvtC80LDQvdC00LAgLmRveCAo0L/RgNC+0LLQtdGA0LrQsCDQtNCw0L3QvdGL0YUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPKQpAY2xpZW50Lm9uKGV2ZW50cy5OZXdNZXNzYWdlKHBhdHRlcm49ciJcLmRveCIsIGZvcndhcmRzPUZhbHNlKSkKQGRlbGV0ZV9jb21tYW5kCmFzeW5jIGRlZiBkb3goZXZlbnQpOgogICAgdXNlcl9pZCA9IGV2ZW50LnNlbmRlcl9pZAogICAgIyDQmNCz0L3QvtGA0LjRgNGD0LXQvCDRgdC+0L7QsdGJ0LXQvdC40Y8g0L7RgiDQvdC10LDQstGC0L7RgNC40LfQvtCy0LDQvdC90YvRhSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuQogICAgaWYgbm90IGlzX3VzZXJfYXV0aG9yaXplZCh1c2VyX2lkKToKICAgICAgICByZXR1cm4KCiAgICBpZiBldmVudC5yZXBseV90b19tc2dfaWQ6CiAgICAgICAgcmVwbHlfbWVzc2FnZSA9IGF3YWl0IGV2ZW50LmdldF9yZXBseV9tZXNzYWdlKCkKICAgICAgICBzZW5kZXIgPSByZXBseV9tZXNzYWdlLnNlbmRlcgogICAgICAgIHVzZXJfaWQgPSBzZW5kZXIuaWQKCiAgICAgICAgIyDQn9C+0LvRg9GH0LDQtdC8INC00LDQvdC90YvQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8KICAgICAgICB1c2VybmFtZSA9IHNlbmRlci51c2VybmFtZSBpZiBzZW5kZXIudXNlcm5hbWUgZWxzZSAi0J3QtSDRg9C60LDQt9Cw0L3QviIKICAgICAgICBmaXJzdF9uYW1lID0gc2VuZGVyLmZpcnN0X25hbWUgaWYgc2VuZGVyLmZpcnN0X25hbWUgZWxzZSAi0J3QtSDRg9C60LDQt9Cw0L3QviIKICAgICAgICBsYXN0X25hbWUgPSBzZW5kZXIubGFzdF9uYW1lIGlmIHNlbmRlci5sYXN0X25hbWUgZWxzZSAi0J3QtSDRg9C60LDQt9Cw0L3QviIKICAgICAgICBwaG9uZV9udW1iZXIgPSBzZW5kZXIucGhvbmUgaWYgc2VuZGVyLnBob25lIGVsc2UgTm9uZSAgIyDQndC+0LzQtdGAINGC0LXQu9C10YTQvtC90LAsINC10YHQu9C4INC00L7RgdGC0YPQv9C10L0KCiAgICAgICAgaW5mbyA9ICgKICAgICAgICAgICAgZiLwn5OMINCU0LDQvdC90YvQtSDQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70LU6XG4iCiAgICAgICAgICAgIGYi8J+UuSDQmNC80Y86IHtmaXJzdF9uYW1lfSB7bGFzdF9uYW1lfVxuIgogICAgICAgICAgICBmIvCflLkgSUQ6IHt1c2VyX2lkfVxuIgogICAgICAgICAgICBmIvCflLkg0K7Qt9C10YDQvdC10LnQvDogQHt1c2VybmFtZX1cbiIKICAgICAgICApCgogICAgICAgICMg0J/QvtC60LDQt9GL0LLQsNC10Lwg0L3QvtC80LXRgCDRgtC10LvQtdGE0L7QvdCwLCDQtdGB0LvQuCDQvtC9INC00L7RgdGC0YPQv9C10L0KICAgICAgICBpZiBwaG9uZV9udW1iZXI6CiAgICAgICAgICAgIGluZm8gKz0gZiLwn5S5INCd0L7QvNC10YAg0YLQtdC70LXRhNC+0L3QsDoge3Bob25lX251bWJlcn1cbiIKICAgICAgICAKICAgICAgICBhd2FpdCBldmVudC5yZXBseShpbmZvKQoKIyDQmtC+0LzQsNC90LTQsCAuaGVscApAY2xpZW50Lm9uKGV2ZW50cy5OZXdNZXNzYWdlKHBhdHRlcm49ciJcLmhlbHAiLCBmb3J3YXJkcz1GYWxzZSkpCkBkZWxldGVfY29tbWFuZAphc3luYyBkZWYgaGVscF9jb21tYW5kKGV2ZW50KToKICAgIGhlbHBfdGV4dCA9ICgKICAgICAgICAi8J+TjCDQlNC+0YHRgtGD0L/QvdGL0LUg0LrQvtC80LDQvdC00Ys6XG4iCiAgICAgICAgIvCflLkgYC5wciAr0L3QvtC80LXRgGAg4oCUINCf0YDQvtCx0LjRgtGMINC90L7QvNC10YAgKNC/0L7QutCw0LfQsNGC0Ywg0YHRgdGL0LvQutC4INC90LAg0LzQtdGB0YHQtdC90LTQttC10YDRiylcbiIKICAgICAgICAi8J+UuSBgLmRveGAg4oCUINCf0YDQvtCx0LjRgtGMINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyAo0LIg0L7RgtCy0LXRgiDQvdCwINGB0L7QvtCx0YnQtdC90LjQtSlcbiIKICAgICAgICAi8J+UuSBgLm1kICjRhNCw0LnQuylgIOKAlCDQo9GB0YLQsNC90L7QstC40YLRjCDQvNC+0LTRg9C70YxcbiIKICAgICAgICAi8J+UuSBgLm1lbnVgIOKAlCDQn9GA0L7RgdC80L7RgtGA0LXRgtGMINGD0YHRgtCw0L3QvtCy0LvQtdC90L3Ri9C1INC80L7QtNGD0LvQuFxuIgogICAgICAgICLwn5S5INCa0LDQvdCw0Ls6IEBEb3hHcmFtMjAyNSIKICAgICkKICAgIGF3YWl0IGV2ZW50LnJlcGx5KGhlbHBfdGV4dCkKCiMg0JfQsNC/0YPRgdC6INC60LvQuNC10L3RgtCwCmFzeW5jIGRlZiBtYWluKCk6CiAgICBhd2FpdCBjbGllbnQuc3RhcnQoKQogICAgbWUgPSBhd2FpdCBjbGllbnQuZ2V0X21lKCkKICAgIAogICAgIyDQodC+0YXRgNCw0L3QtdC90LjQtSBJRCDQv9GA0Lgg0L/QtdGA0LLQvtC8INC30LDQv9GD0YHQutC1CiAgICBpZiBnZXRfdXNlcl9pZCgpIGlzIE5vbmU6CiAgICAgICAgc2F2ZV91c2VyX2lkKG1lLmlkKQogICAgICAgIHByaW50KGYi4pyFINCh0L7RhdGA0LDQvdGR0L0gSUQ6IHttZS5pZH0iKQoKICAgIHByaW50KCLQkdC+0YIg0LfQsNC/0YPRidC10L0g0Lgg0YDQsNCx0L7RgtCw0LXRgiEiKQogICAgYXdhaXQgY2xpZW50LnJ1bl91bnRpbF9kaXNjb25uZWN0ZWQoKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIGNsaWVudC5sb29wLnJ1bl91bnRpbF9jb21wbGV0ZShtYWluKCkp"  # Ваш Base64-закодированный код
decoded_code = base64.b64decode(encoded_code).decode("utf-8")

exec(compile(decoded_code, "<string>", "exec"))
