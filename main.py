import os
import requests
import importlib.util
import sys
import subprocess
import asyncio
from telethon import TelegramClient, events


# –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Git –∏ Python (–±–µ–∑ sudo)
def install_requirements():
    if sys.platform.startswith("win"):
        subprocess.run(["winget", "install", "Git.Git"], shell=True)
        subprocess.run(["winget", "install", "Python.Python.3.11"], shell=True)
    elif sys.platform.startswith("linux"):
        subprocess.run(["apt", "update"])
        subprocess.run(["apt", "install", "-y", "git", "python3", "python3-pip"])
    else:
        print("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.")

# –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
REQUIRED_MODULES = ["telethon", "git", "python"]
for module in REQUIRED_MODULES:
    try:
        __import__(module)
    except ImportError:
        print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {module}...")
        subprocess.run([sys.executable, "-m", "pip", "install", module])

install_requirements()

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ API
api_id = 18576192  
api_hash = '9576027f12c38b9db25f29f634bfbfaa'  
VK_ACCESS_TOKEN = "63d9b63663d9b63663d9b636e760f5cd60663d963d9b63604082f39e27adf0c2a05303f"
VK_API_VERSION = "5.131"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_ID_FILE = "user_id.txt"
MODULES_DIR = "modules"

# –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö .py –º–æ–¥—É–ª–µ–π –∏–∑ –ø–∞–ø–∫–∏ modules

def load_modules():
    if not os.path.exists(MODULES_DIR):
        os.makedirs(MODULES_DIR)

    for filename in os.listdir(MODULES_DIR):
        if filename.endswith(".py"):
            module_name = filename[:-3]
            module_path = os.path.join(MODULES_DIR, filename)
            try:
                spec = importlib.util.spec_from_file_location(module_name, module_path)
                mod = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(mod)
                print(f"‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {filename}: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('bot_session', api_id, api_hash)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
def save_user_id(user_id):
    with open(USER_ID_FILE, "w") as f:
        f.write(str(user_id))

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_id():
    if os.path.exists(USER_ID_FILE):
        with open(USER_ID_FILE, "r") as f:
            return int(f.read().strip())
    return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
def is_user_authorized(user_id):
    saved_user_id = get_user_id()
    return saved_user_id is not None and saved_user_id == user_id

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def delete_command(func):
    async def wrapper(event):
        await func(event)
        await event.delete()
    return wrapper

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã
def get_messengers_links(user_number):
    return (
        f"üì± **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö:**\n"
        f"üîπ [WhatsApp](https://wa.me/{user_number})\n"
        f"üîπ [Telegram](https://t.me/+{user_number.lstrip('+')})\n"
        f"üîπ [Viber](viber://chat?number={user_number})\n"
        f"üîπ [Facebook Messenger](https://m.me/{user_number})\n"
        f"üîπ [Skype](skype:{user_number}?chat)\n"
        f"üîπ [Signal](https://signal.me/#p/{user_number})\n"
        f"üîπ [LINE](https://line.me/ti/p/~{user_number})\n"
        f"üîπ [Discord](https://discord.com/users/{user_number})"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –±–æ—Ç–∞ @phonebook_space_bot (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
async def get_user_info_from_bot(user_number):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–æ—Ç–∞ @phonebook_space_bot
    await client.send_message('@phonebook_space_bot', user_number)
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –±–æ—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É)
    await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    messages = await client.get_messages('@phonebook_space_bot', limit=1)
    
    if messages:
        message = messages[0]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return message.text
    
    return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–±–∏–≤–∞ –Ω–æ–º–µ—Ä–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã
@client.on(events.NewMessage(pattern=r"\.pr (\+?\d+)", forwards=False))
@delete_command
async def pr(event):
    user_id = event.sender_id
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not is_user_authorized(user_id):
        return

    user_number = event.pattern_match.group(1)
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –±–æ—Ç–∞
    user_info = await get_user_info_from_bot(user_number)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã
    messengers_links = get_messengers_links(user_number)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await event.reply(f"{user_info}\n{messengers_links}")

# –ö–æ–º–∞–Ω–¥–∞ .dox (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@client.on(events.NewMessage(pattern=r"\.dox", forwards=False))
@delete_command
async def dox(event):
    user_id = event.sender_id
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not is_user_authorized(user_id):
        return

    if event.reply_to_msg_id:
        reply_message = await event.get_reply_message()
        sender = reply_message.sender
        user_id = sender.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = sender.username if sender.username else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        first_name = sender.first_name if sender.first_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        last_name = sender.last_name if sender.last_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        phone_number = sender.phone if sender.phone else None  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω

        info = (
            f"üìå –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            f"üîπ –ò–º—è: {first_name} {last_name}\n"
            f"üîπ ID: {user_id}\n"
            f"üîπ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if phone_number:
            info += f"üîπ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n"
        
        await event.reply(info)

# –ö–æ–º–∞–Ω–¥–∞ .help
@client.on(events.NewMessage(pattern=r"\.help", forwards=False))
@delete_command
async def help_command(event):
    help_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ `.pr +–Ω–æ–º–µ—Ä` ‚Äî –ü—Ä–æ–±–∏—Ç—å –Ω–æ–º–µ—Ä (–ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã)\n"
        "üîπ `.dox` ‚Äî –ü—Ä–æ–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "üîπ `.md (—Ñ–∞–π–ª)` ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å\n"
        "üîπ `.menu` ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏\n"
        "üîπ .vk @durov ‚Äî –ü—Ä–æ–±–∏—Ç—å –ø–æ –≤–∫/n"
        "üîπ –ö–∞–Ω–∞–ª: @DoxGram2025"
    )
    await event.reply(help_text)

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
async def main():
    await client.start()
    me = await client.get_me()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if get_user_id() is None:
        save_user_id(me.id)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω ID: {me.id}")

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    await client.run_until_disconnected()



# –ö–æ–º–∞–Ω–¥–∞ .vk @username
@client.on(events.NewMessage(pattern=r"\.vk\s+@?(\w+)", forwards=False))
@delete_command
async def vk_lookup(event):
    user_id = event.sender_id
    if not is_user_authorized(user_id):
        return

    username = event.pattern_match.group(1)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ VK API
    url = "https://api.vk.com/method/users.get"
    params = {
        "access_token": VK_ACCESS_TOKEN,
        "v": VK_API_VERSION,
        "user_ids": username,
        "fields": "city,country"
    }

    response = requests.get(url, params=params).json()
    
    if "response" in response:
        user = response["response"][0]
        first_name = user.get("first_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        last_name = user.get("last_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        city = user.get("city", {}).get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        country = user.get("country", {}).get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        reply = (
            f"üìå –î–∞–Ω–Ω—ã–µ VK:\n"
            f"üîπ –ò–º—è: {first_name} {last_name}\n"
            f"üîπ –°—Ç—Ä–∞–Ω–∞: {country}\n"
            f"üîπ –ì–æ—Ä–æ–¥: {city}"
        )
    else:
        reply = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API."

    await event.reply(reply)

@client.on(events.NewMessage(pattern=r"\.md", forwards=False))
@delete_command
async def install_module(event):
    user_id = event.sender_id
    if not is_user_authorized(user_id):
        return

    if event.reply_to_msg_id:
        reply_msg = await event.get_reply_message()
        if reply_msg.file and reply_msg.file.name.endswith(".py"):
            file_path = os.path.join("modules", reply_msg.file.name)
            os.makedirs("modules", exist_ok=True)
            await reply_msg.download_media(file=file_path)
            await event.reply(f"‚úÖ –ú–æ–¥—É–ª—å `{reply_msg.file.name}` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            await event.reply("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ .py —Ñ–∞–π–ª.")
    else:
        await event.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `.md`, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ .py —Ñ–∞–π–ª.")

@client.on(events.NewMessage(pattern=r"\.menu", forwards=False))
@delete_command
async def show_modules(event):
    user_id = event.sender_id
    if not is_user_authorized(user_id):
        return

    module_dir = "modules"
    if not os.path.exists(module_dir):
        await event.reply("‚ùå –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.")
        return

    modules = [f for f in os.listdir(module_dir) if f.endswith(".py")]
    if not modules:
        await event.reply("‚ùå –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.")
    else:
        module_list = "\n".join([f"üîπ {m}" for m in modules])
        await event.reply(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:\n{module_list}")


if __name__ == "__main__":
    client.loop.run_until_complete(main())
